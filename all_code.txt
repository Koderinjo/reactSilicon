import React, { useState } from 'react';

const AccordionItem = ({ title, content }) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleAccordion = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className={`accordion-item ${isOpen ? 'active' : ''}`}>
      <button className="accordion-header" onClick={toggleAccordion}>
        {title}
        <span className="btn-circle">
          <i className={`fa-solid fa-chevron-${isOpen ? 'up' : 'down'}`}></i>
        </span>
      </button>
      {isOpen && <div className="accordion-content"><p>{content}</p></div>}
    </div>
  );
};

export default AccordionItem;
import React from 'react';
import IphoneCard from '../assets/images/iphone-card.svg';
import IconCard from '../assets/images/icon-card.svg';
import IconShield from '../assets/images/icon-shield.svg';
import IconStats from '../assets/images/icon-stats.svg';
import IconSupport from '../assets/images/icon-support.svg';
import IconCash from '../assets/images/icon-cash.svg';
import IconEmoji from '../assets/images/icon-emoji.svg';

const features = [
  { img: IconCard, title: 'Easy Payments', description: 'Id mollis consectetur congue egestas.' },
  { img: IconShield, title: 'Data Security', description: 'Augue pulvinar justo, fermentum.' },
  { img: IconStats, title: 'Cost Statistics', description: 'Mattis urna ultricies non amet.' },
  { img: IconSupport, title: 'Support 24/7', description: 'A elementum, imperdiet enim.' },
  { img: IconCash, title: 'Regular Cashback', description: 'Sit facilisis dolor arcu.' },
  { img: IconEmoji, title: 'Top Standards', description: 'Faucibus cursus maecenas.' }
];

const AppFeatures = () => (
  <section id="app-features">
    <div className="container">
      <div id="image">
        <img src={IphoneCard} alt="Iphone + Card" />
      </div>
      <div>
        <h1>App Features</h1>
        <p id="features-paragraph">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin volutpat mollis egestas.</p>
      </div>
      <div className="features-grid">
        {features.map((feature, index) => (
          <div key={index} className="feature-item">
            <div className="icon-box">
              <img src={feature.img} alt={`Icon ${feature.title}`} />
            </div>
            <div className="feature-text">
              <h5>{feature.title}</h5>
              <p>{feature.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>
);

export default AppFeatures;
import React from 'react';
import Brand1 from '../assets/images/brand-1.svg';
import Brand2 from '../assets/images/brand-2.svg';
import Brand3 from '../assets/images/brand-3.svg';
import Brand4 from '../assets/images/brand-4.svg';
import Brand5 from '../assets/images/brand-5.svg';
import Brand6 from '../assets/images/brand-6.svg';

const brandImages = {
  1: Brand1,
  2: Brand2,
  3: Brand3,
  4: Brand4,
  5: Brand5,
  6: Brand6,
};

const Brands = () => (
  <section id="brands">
    <div className="container">
      {[1, 2, 3, 4, 5, 6].map(num => (
        <div key={num} id={`brand-${num}`} className="brand-box">
          <img src={brandImages[num]} alt={`Brand-${num}`} />
        </div>
      ))}
    </div>
  </section>
);

export default Brands;
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHome, faChevronRight } from '@fortawesome/free-solid-svg-icons';

const Breadcrumb = () => {
  const location = useLocation();
  const pathnames = location.pathname.split('/').filter((x) => x);

  return (
    <nav className="breadcrumb">
      <Link to="/">
        <FontAwesomeIcon icon={faHome} /> Home
      </Link>
      {pathnames.map((value, index) => {
        const to = `/${pathnames.slice(0, index + 1).join('/')}`;
        const isLast = index === pathnames.length - 1;
        
        return isLast ? (
          <span key={to} className="breadcrumb-active">
            <FontAwesomeIcon icon={faChevronRight} /> {value.charAt(0).toUpperCase() + value.slice(1)}
          </span>
        ) : (
          <span key={to}>
            <FontAwesomeIcon icon={faChevronRight} />{' '}
            <Link to={to}>{value.charAt(0).toUpperCase() + value.slice(1)}</Link>
          </span>
        );
      })}
    </nav>
  );
};

export default Breadcrumb;
import React, { useState } from 'react';

const ConsultationForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [specialist, setSpecialist] = useState('');
  const [errors, setErrors] = useState({});
  const [message, setMessage] = useState({ type: '', text: '' });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateName = (name) => {
    const re = /^[a-zA-Z\s'-]+$/;
    const isValidFormat = re.test(name);
    const isValidLength = name.trim().length >= 2;
    const hasTwoWords = name.trim().split(' ').length >= 2;
    return isValidFormat && isValidLength && hasTwoWords;
  };

  const validateEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newErrors = {};

    setMessage({ type: '', text: '' });

    if (!name) {
      newErrors.name = 'Full name is required';
    } else if (!validateName(name)) {
      newErrors.name = 'Please enter your full name (first and last name)';
    }

    if (!email) {
      newErrors.email = 'Email address is required';
    } else if (!validateEmail(email)) {
      newErrors.email = 'Invalid email address';
    }

    if (!specialist) {
      newErrors.specialist = 'Please select a specialist';
    }

    setErrors(newErrors);

    if (Object.keys(newErrors).length === 0) {
      setIsSubmitting(true);
      try {
        const response = await fetch('https://win24-assignment.azurewebsites.net/api/forms/contact', {
          method: 'POST',
          headers: {
            'accept': '*/*',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            fullName: name,
            email: email,
            specialist: specialist,
          }),
        });

        if (response.ok) {
          setMessage({ type: 'success', text: 'Your appointment request has been submitted!' });
          setName('');
          setEmail('');
          setSpecialist('');
          setErrors({});
          setTimeout(() => {
            setMessage({ type: '', text: '' });
          }, 2500);
        } else {
          const errorData = await response.json();
          setMessage({ type: 'error', text: errorData.message || 'Submission failed' });
        }
      } catch (error) {
        setMessage({ type: 'error', text: 'An error occurred. Please try again.' });
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  return (
    <section className="consultation-form-container">
      <form className="consultation-form" onSubmit={handleSubmit} noValidate>
        <div>
          <h2>Get Online Consultation</h2>
        </div>

        <label htmlFor="name">Full name</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={(e) => {
            setName(e.target.value);
            if (errors.name) {
              setErrors({ ...errors, name: '' });
            }
          }}
          placeholder="Jack Smith"
        />
        {errors.name && <p className="error">{errors.name}</p>}

        <label htmlFor="email">Email address</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => {
            setEmail(e.target.value);
            if (errors.email) {
              setErrors({ ...errors, email: '' });
            }
          }}
          placeholder="example@email.com"
        />
        {errors.email && <p className="error">{errors.email}</p>}

        <label htmlFor="specialist">Specialist</label>
        <div className="select-wrapper">
          <select
            id="specialist"
            className="custom-select"
            value={specialist}
            onChange={(e) => {
              setSpecialist(e.target.value);
              if (errors.specialist) {
                setErrors({ ...errors, specialist: '' });
              }
            }}
          >
            <option value="">Select a specialist</option>
            <option value="doctor">Doctor</option>
            <option value="nurse">Nurse</option>
            <option value="therapist">Therapist</option>
          </select>
        </div>
        {errors.specialist && <p className="error">{errors.specialist}</p>}

        {message.text && <p className={message.type === 'error' ? 'error' : 'success'}>{message.text}</p>}

        <button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Submitting...' : 'Make an appointment'}
        </button>
      </form>
    </section>
  );
};

export default ConsultationForm;
import React from 'react';
import ConsultationForm from './ConsultationForm';
import { FaEnvelope, FaUsers } from 'react-icons/fa';
import Breadcrumb from './Breadcrumb';

const ContactInfo = () => (
  <div className="contact-info">
    <div className="left-column">
      <div className="contactheading">
        <Breadcrumb />
        <h1>Contact Us</h1>
      </div>
      <div className="contact-card email-us">
        <div className="icon-container">
          <FaEnvelope className="contact-icon" />
        </div>
        <div className="email-text">
          <h3>Email us</h3>
          <p>Please feel free to drop us a line. We will respond as soon as possible.</p>
          <a href="#">Leave a message â†’</a>
        </div>
      </div>
      <div className="contact-card careers">
        <div className="icon-container">
          <FaUsers className="contact-icon" />
        </div>
        <div className="careers-text">
          <h3>Careers</h3>
          <p>Sit ac ipsum leo lorem magna nunc mattis maecenas non vestibulum.</p>
          <a href="#">Send an application â†’</a>
        </div>
      </div>
    </div>
    <div className="right-column">
      <ConsultationForm />
    </div>
  </div>
);

export default ContactInfo;
import React from 'react';
import ContactInfo from './ContactInfo';
import MapSection from './MapSection';
import MedicalCenters from './MedicalCenters';
import Footer from './Footer';

const ContactPage = () => (
  <div className="contact-us-page">
    <div className="container">
      <ContactInfo />
    </div>
    <div className="map-page">
      <div className="container">
        <MapSection />
        <MedicalCenters />
      </div>
    </div>
  </div>
);

export default ContactPage;
import React, { useContext } from 'react';
import { DarkModeContext } from '../App';

const DarkModeToggle = () => {
  const { isDarkMode, setIsDarkMode } = useContext(DarkModeContext);

  const handleToggle = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <div id="darkmode-toggle-switch" className="btn-toggle-switch">
      <span className="label">Dark mode</span>
      <label htmlFor="darkmode-switch" className="toggle-switch">
        <input
          id="darkmode-switch"
          type="checkbox"
          checked={isDarkMode}
          onChange={handleToggle}
        />
        <span className="slider round"></span>
      </label>
    </div>
  );
};

export default DarkModeToggle;
import React from 'react';
import SpendingRight from '../assets/images/spending right.svg';
import ContactsLeft from '../assets/images/contacts left.svg';
import IconCard from '../assets/images/icon-card.svg';
import IconCash from '../assets/images/icon-cash.svg';

const DesktopSection = () => (
  <section id="only-desktop">
    <div className="container">
      <div id="all-grid">
        <div id="top-left">
          <h2>Make your money transfer simple and clear</h2>
          <ul className="checklist">
            {['Banking transactions are free for you', 'No monthly cash commission', 'Manage payments and transactions online'].map((text, index) => (
              <li key={index}>
                <i className="fa-sharp fa-regular fa-circle-check" style={{ color: '#6366f1' }}></i>
                {text}
              </li>
            ))}
          </ul>
          <a id="learn-more" href="#" className="btn-primary">
            <span>Learn more</span>
            <i className="fa-sharp fa-solid fa-arrow-right"></i>
          </a>
        </div>
        
        <img id="spending-img" src={SpendingRight} alt="Picture of spending" />
        <img id="contact-img" src={ContactsLeft} alt="Picture of contacts" />
        
        <div id="bottom-right">
          <h2>Receive payment from international bank details</h2>
          <div id="cards">
            {/* Render each icon directly without mapping */}
            <div className="icon-card">
              <div className="icon-box">
                <img src={IconCard} alt="Icon Card" />
              </div>
              <p>Manage your payments online. Mollis congue egestas.</p>
            </div>
            
            <div className="icon-card">
              <div className="icon-box">
                <img src={IconCash} alt="Icon Cash" />
              </div>
              <p>Manage your payments online. Mollis congue egestas.</p>
            </div>
          </div>
          <a id="learn-more" href="#" className="btn-primary">
            <span>Learn more</span>
            <i className="fa-sharp fa-solid fa-arrow-right"></i>
          </a>
        </div>
      </div>
    </div>
  </section>
);

export default DesktopSection;
import React, { useContext } from 'react';
import { DarkModeContext } from '../App';
import FAQList from './FAQList';



import IconBoxPhoneDark from '../assets/images/icon-box-phone-dark.svg';
import IconBoxPhoneLight from '../assets/images/icon-box-phone.svg';
import IconBoxMessageDark from '../assets/images/icon-box-message-dark.svg';
import IconBoxMessageLight from '../assets/images/icon-box-message.svg';
import IconBoxPhoneTabletDark from '../assets/images/icon-box-phone-tablet-dark.svg';
import IconBoxPhoneTabletLight from '../assets/images/icon-box-phone-tablet.svg';
import IconBoxMessageTabletDark from '../assets/images/icon-box-message-tablet-dark.svg';
import IconBoxMessageTabletLight from '../assets/images/icon-box-message-tablet.svg';

const FAQ = () => {
  const { isDarkMode } = useContext(DarkModeContext);

  return (
    <section id="FAQ">
      <div className="container">
        <div className="faq-contact">
          <div className="text">
            <h2>Any questions? Check out the FAQs</h2>
            <p>Still have unanswered questions and need to get in touch?</p>
          </div>
          <div className="contact-boxes-desktop">
            <div id="icon-box-phone">
              <a to="#">
                <img
                  src={isDarkMode ? IconBoxPhoneDark : IconBoxPhoneLight}
                  alt="Contact us - Phone"
                />
              </a>
            </div>
            <div id="icon-box-message">
              <a to="#">
                <img
                  src={isDarkMode ? IconBoxMessageDark : IconBoxMessageLight}
                  alt="Contact us - Message"
                />
              </a>
            </div>
          </div>
        </div>
        
        <FAQList />

        <div className="contact-boxes-tablet">
          <div id="icon-box-phone-tablet">
            <a to="#">
              <img
                src={isDarkMode ? IconBoxPhoneTabletDark : IconBoxPhoneTabletLight}
                alt="Contact us - Phone"
              />
            </a>
          </div>
          <div id="icon-box-message-tablet">
            <a to="#">
              <img
                src={isDarkMode ? IconBoxMessageTabletDark : IconBoxMessageTabletLight}
                alt="Contact us - Message"
              />
            </a>
          </div>
        </div>

        <div className="contact-boxes-mobile">
          <a to="#" id="contact-us" className="btn-primary">
            <span>Contact us now</span>
          </a>
        </div>
      </div>
    </section>
  );
};

export default FAQ;
import React from 'react';
import AccordionItem from './AccordionItem';

const FAQItem = ({ faq }) => {
  return (
    <AccordionItem title={faq.title} content={faq.content} />
  );
};

export default FAQItem;
import React, { useEffect, useState } from 'react';
import FAQItem from './FAQItem';

const FAQList = () => {
  const [faqItems, setFaqItems] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchFAQData = async () => {
      try {
        const res = await fetch('https://win24-assignment.azurewebsites.net/api/faq');
        if (!res.ok) {
          throw new Error('Failed to fetch FAQs');
        }
        const data = await res.json();
        setFaqItems(data);
      } catch (error) {
        console.error('Error fetching FAQ data:', error);
        setError('Unable to load FAQs at this time.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchFAQData();
  }, []);

  if (isLoading) {
    return <p>Loading FAQs...</p>;
  }

  if (error) {
    return <p className="error">{error}</p>;
  }

  return (
    <div className="accordion-container">
      {faqItems.map((faq) => (
        <FAQItem key={faq.id} faq={faq} />
      ))}
    </div>
  );
};

export default FAQList;
import React from 'react';

const Footer = () => (
  <footer>
    <div className="container">
      <div className="footer-text">
        <p className="copyright">Â© 2024 Silicon. All rights reserved.</p>
        <p className="credit">Credit MadrasThemes</p>
      </div>
    </div>
  </footer>
);

export default Footer;
import React, { useContext } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { DarkModeContext } from '../App';
import SililogoDark from '../assets/images/sililogo-dark.svg';
import SililogoLight from '../assets/images/sililogo.svg';
import MobileMenu from './MobileMenu';
import DarkModeToggle from './DarkModeToggle';

const Header = () => {
  const { isDarkMode } = useContext(DarkModeContext);
  const location = useLocation();
  const isContactPage = location.pathname === '/contact';

  return (
    <header className={`header ${isContactPage ? 'contact-header' : ''}`}>
      <div className="container">
        <Link id="sililogo" to="/">
          <img src={isDarkMode ? SililogoDark : SililogoLight} alt="Silicon Logo" />
        </Link>
        <nav id="main-menu" className="navbar">
          <Link className="nav-link" id="home" to="/">
            Home
          </Link>
          <Link className="nav-link" id="features" to="#">
            Features
          </Link>
          <Link className="nav-link" id="contact" to="/contact">
            Contact
          </Link>
        </nav>
        <DarkModeToggle />
        <Link id="signin" to="/signin" className="btn-primary">
          <i className="fa-light fa-user"></i>
          <span>Sign in / up</span>
        </Link>
        <MobileMenu />
      </div>
    </header>
  );
};

export default Header;
import React, { useContext } from 'react';
import { DarkModeContext } from '../App';
import AppstoreDark from '../assets/images/appstore-dark.svg'
import AppstoreLight from '../assets/images/appstore.svg'
import PlaystoreDark from '../assets/images/playstore-dark.svg'
import PlaystoreLight from '../assets/images/playstore.svg'
import IphoneBudget from '../assets/images/iphone-budg.svg'
import IphoneTransactions from '../assets/images/iphone-trans.svg'

const HeroSection = () => {
  const { isDarkMode } = useContext(DarkModeContext);

  return (
    <section id="hero">
      <div className="container">
        <div className="headline">
          <h1>Manage All Your <br /> Money in One App</h1>
        </div>
        <div className="content">
          <p>We offer you a new generation of the mobile banking. <br /> Save, spend & manage money in your pocket.</p>
          <div className="buttons">
            <a className="btn-download-app" id="appstore" href="#">
              <img src={isDarkMode ? AppstoreDark : AppstoreLight} alt="Appstore" />
            </a>
            <a className="btn-download-app" id="playstore" href="#">
              <img src={isDarkMode ? PlaystoreDark : PlaystoreLight} alt="Playstore" />
            </a>
          </div>
          <a href="#" className="discover-more">
            <span className="btn-circle">
              <i className="fa-solid fa-chevron-down"></i>
            </span>
            <span id="discover-more">Discover more</span>
          </a>
        </div>
        <div className="images">
          <img className="img-back" src={IphoneBudget} alt="iPhone Budget" />
          <img className="img-front" src={IphoneTransactions} alt="iPhone Transactions" />
        </div>
      </div>
    </section>
  );
};

export default HeroSection;
import React from 'react';
import IphoneLeftDesk from '../assets/images/iphone-left-desk.svg';
import IphoneMidDesk from '../assets/images/iphone-mid-desk.svg';
import IphoneRightDesk from '../assets/images/iphone-right-desk.svg';
import IphoneLeftTab from '../assets/images/iphone-left-tab.svg';
import IphoneMidTab from '../assets/images/iphone-mid-tab.svg';
import IphoneRightTab from '../assets/images/iphone-right-tab.svg';

const HowItWorks = () => {
  const images = [
    { id: 'left', alt: 'iPhone to the left', desktopSrc: IphoneLeftDesk, tabletSrc: IphoneLeftTab },
    { id: 'mid', alt: 'iPhone in the middle', desktopSrc: IphoneMidDesk, tabletSrc: IphoneMidTab },
    { id: 'right', alt: 'iPhone to the right', desktopSrc: IphoneRightDesk, tabletSrc: IphoneRightTab }
  ];

  return (
    <section id="how-does-it-work">
      <div className="container">
        <h1>How Does It Work?</h1>
        <div id="phone-6">
          {images.map((img) => (
            <React.Fragment key={img.id}>
              <img id={`iphone-${img.id}-desk`} src={img.desktopSrc} alt={`${img.alt} (desktop)`} />
              <img id={`iphone-${img.id}-tab`} src={img.tabletSrc} alt={`${img.alt} (tablet)`} />
            </React.Fragment>
          ))}
        </div>
        <div id="desktop-text">
          <h4>Latest transaction history</h4>
          <p>Enim, et amet praesent pharetra. Mi non ante hendrerit amet sed.</p>
        </div>
        <div id="tablet-text">
          <h4>Step 3. Transfers to people from your contact list</h4>
          <p>Proin volutpat mollis egestas. Nam luctus facilisis ultrices.</p>
        </div>
        <div id="mobile-text">
          <h4>Transfers to people from your contact list</h4>
          <p>Proin volutpat mollis egestas. Nam luctus facilisis ultrices.</p>
        </div>
      </div>
    </section>
  );
};

export default HowItWorks;
import React from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';
import markerIcon from 'leaflet/dist/images/marker-icon.png';
import markerShadow from 'leaflet/dist/images/marker-shadow.png';

delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

const MapSection = () => (
  <section className="map-section">
    <MapContainer center={[37.154362177237914, -83.7619533079481]} zoom={16} style={{ height: '540px', width: '100%' }}>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      <Marker position={[37.154362177237914, -83.7619533079481]}>
        <Popup>Our main office</Popup>
      </Marker>
    </MapContainer>
  </section>
);

export default MapSection;
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {faFacebookF, faTwitter, faInstagram, faYoutube} from '@fortawesome/free-brands-svg-icons';
import {faMapMarkerAlt, faPhone, faClock} from '@fortawesome/free-solid-svg-icons';

const MedicalCenters = () => (
  <section className="medical-centers">
    <div className="center">
      <h3>Medical Center 1</h3>
      <p>
        <FontAwesomeIcon icon={faMapMarkerAlt} />
        4517 Washington Ave. Manchester, Kentucky 39495
      </p>
      <p>
        <FontAwesomeIcon icon={faPhone} />
        (406) 555-0120
      </p>
      <div className="opening-hours">
        <FontAwesomeIcon icon={faClock} />
        <div>
          <strong>Mon - Fri:</strong> 9:00 am - 10:00 pm <br /> <strong>Sat - Sun:</strong> 9:00 am - 8:00 pm
        </div>
      </div>
    </div>
    <div className="center">
      <h3>Medical Center 2</h3>
      <p>
        <FontAwesomeIcon icon={faMapMarkerAlt} />
        2464 Royal Ln. Mesa, New Jersey 45463
      </p>
      <p>
        <FontAwesomeIcon icon={faPhone} />
        (406) 544-0123
      </p>
      <div className="opening-hours">
        <FontAwesomeIcon icon={faClock} />
        <div>
          <strong>Mon - Fri:</strong> 9:00 am - 10:00 pm <br/> <strong>Sat - Sun:</strong> 9:00 am - 8:00 pm
        </div>
      </div>
      <div className="social-media">
        <a href="https://www.facebook.com" target="_blank" rel="noopener noreferrer">
          <FontAwesomeIcon icon={faFacebookF} />
        </a>
        <a href="https://www.twitter.com" target="_blank" rel="noopener noreferrer">
          <FontAwesomeIcon icon={faTwitter} />
        </a>
        <a href="https://www.instagram.com" target="_blank" rel="noopener noreferrer">
          <FontAwesomeIcon icon={faInstagram} />
        </a>
        <a href="https://www.youtube.com" target="_blank" rel="noopener noreferrer">
          <FontAwesomeIcon icon={faYoutube} />
        </a>
      </div>
    </div>
  </section>
);

export default MedicalCenters;
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';

const MobileMenu = () => {
  const [menuOpen, setMenuOpen] = useState(false);
  const menuRef = useRef(null);

  const toggleMenu = () => {
    setMenuOpen((prevState) => !prevState);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        menuRef.current &&
        !menuRef.current.contains(event.target)
      ) {
        setMenuOpen(false);
      }
    };

    if (menuOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [menuOpen]);

  return (
    <div className="menu-button" ref={menuRef}>
      <button
        className="btn-menu"
        aria-label="Toggle mobile menu"
        onClick={toggleMenu}
      >
        <i className="fa-sharp fa-regular fa-bars"></i>
      </button>
      <ul className={`menu-dropdown ${menuOpen ? 'open' : ''}`}>
        <li>
          <Link to="/" onClick={() => setMenuOpen(false)}>
            Home
          </Link>
        </li>
        <li>
          <Link to="/contact" onClick={() => setMenuOpen(false)}>
            Contact
          </Link>
        </li>
      </ul>
    </div>
  );
};

export default MobileMenu;
import React, { useState } from 'react';
import Notification from '../assets/images/notification.svg';

const Subscribe = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState({ type: '', text: '' });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateEmail = (email) => {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
  };

  const handleInputChange = (e) => {
    setEmail(e.target.value);
    if (message.text) {
      setMessage({ type: '', text: '' });
    }
  };

  const handleSubscribe = async () => {
    if (!validateEmail(email)) {
      setMessage({ type: 'error', text: 'Please enter a valid email address.' });
      return;
    }

    setIsSubmitting(true);
    try {
      const response = await fetch('https://win24-assignment.azurewebsites.net/api/forms/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        setMessage({ type: 'success', text: 'You are now subscribed!' });
        setEmail('');
      } else {
        const errorData = await response.json();
        setMessage({
          type: 'error',
          text: errorData.message || 'An error occurred during subscription.',
        });
      }
    } catch (err) {
      setMessage({ type: 'error', text: 'An error occurred during subscription.' });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section id="Subscribe">
      <div className="container">
        <div className="background-card">
          <div id="bell">
            <img src={Notification} alt="Notification Bell" />
          </div>
          <div className="sub-text">
            <h2>Subscribe to our newsletter</h2>
          </div>
          <div className="sub-text-desktop">
            <h4>Subscribe to our newsletter to stay informed about the latest updates</h4>
          </div>
          <div className="subscribe-container">
            <div className="icon-wrapper">
              <i className="fa-sharp fa-regular fa-envelope"></i>
            </div>
            <input
              type="email"
              placeholder="Your email"
              className="subscribe-input"
              value={email}
              onChange={handleInputChange}
            />
            <button
              className="subscribe-button"
              onClick={handleSubscribe}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Subscribing...' : 'Subscribe'}
            </button>
            {message.text && (
              <div className={`${message.type}-message`}>{message.text}</div>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default Subscribe;
import React, { useContext } from 'react';
import { DarkModeContext } from '../App';
import TestimonialsList from './TestimonialsList';
import QuotesIcon from '../assets/images/quotes.svg';

const Testimonials = () => {
  const { isDarkMode } = useContext(DarkModeContext);

  return (
    <section id="testimonials">
      <div className="container">
        <div id="clients">
          <h1 id="testimonialsHeading">Clients are Loving Our App</h1>
          <TestimonialsList quotesIcon={QuotesIcon} />
        </div>
      </div>
    </section>
  );
};

export default Testimonials;
import React from 'react';

const TestimonialsItem = ({ item, quotesIcon }) => {
  return (
    <div className="review-card">
      <img src={quotesIcon} alt="Quotes Icon" className="quotes-icon" />
      <div className="stars">
        {'â˜…'.repeat(item.starRating)}{'â˜†'.repeat(5 - item.starRating)}
      </div>
      <p className="comment">{item.comment}</p>
      <div className="user-info">
        <img src={item.avatarUrl} alt={`${item.author}'s avatar`} className="avatar" />
        <div className="user-details">
          <p className="author">{item.author}</p>
          <p className="job-role">{item.jobRole}</p>
        </div>
      </div>
    </div>
  );
};

export default TestimonialsItem;
import React, { useEffect, useState } from 'react';
import TestimonialsItem from './TestimonialsItem';

const TestimonialsList = ({ quotesIcon }) => {
  const [testimonialsItems, setTestimonialsItems] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchTestimonialsData = async () => {
      try {
        const res = await fetch('https://win24-assignment.azurewebsites.net/api/testimonials');
        if (!res.ok) {
          throw new Error('Failed to fetch testimonials');
        }
        const data = await res.json();
        setTestimonialsItems(data);
      } catch (error) {
        console.error('Error fetching testimonials data:', error);
        setError('Unable to load testimonials at this time.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchTestimonialsData();
  }, []);

  if (isLoading) {
    return <p>Loading testimonials...</p>;
  }

  if (error) {
    return <p className="error">{error}</p>;
  }

  return (
    <div className="testimonials">
      {testimonialsItems.map((item) => (
        <TestimonialsItem key={item.id} item={item} quotesIcon={quotesIcon} />
      ))}
    </div>
  );
};

export default TestimonialsList;
import React, { useState, useEffect, createContext } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import HeroSection from './components/HeroSection';
import Brands from './components/Brands';
import AppFeatures from './components/AppFeatures';
import HowItWorks from './components/HowItWorks';
import DesktopSection from './components/DesktopSection';
import Testimonials from './components/Testimonials';
import FAQ from './components/FAQ';
import Subscribe from './components/Subscribe';
import Footer from './components/Footer';
import ContactPage from './components/ContactPage';

export const DarkModeContext = createContext();

function App() {
  const [isDarkMode, setIsDarkMode] = useState(false);

  useEffect(() => {
    document.body.classList.toggle('dark', isDarkMode);
  }, [isDarkMode]);

  return (
    <DarkModeContext.Provider value={{ isDarkMode, setIsDarkMode }}>
      <Router>
        <div className="wrapper">
          <Header />
          <main>
            <Routes>
              <Route path="/" element={
                  <>
                    <HeroSection />
                    <Brands />
                    <AppFeatures />
                    <HowItWorks />
                    <DesktopSection />
                    <Testimonials />
                    <FAQ />
                    <Subscribe />
                  </>
                }
              />

              
              <Route path="/contact" element={<ContactPage />} />

              
              <Route path="*" element={<HeroSection />} />
            </Routes>
          </main>
          <Footer />
        </div>
      </Router>
    </DarkModeContext.Provider>
  );
}

export default App;
@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&display=swap');

:root {

    /* Primary Colors */
    --color-heading: #0B0F19;
    --color-navigation: #33354D;
    --color-body: #565973;
    --color-muted: #9397AD;
    --color-placehold: #B4B7C9;
    --color-forms: #D4D7E5;
    --color-divider: #E2E5F1;
    --color-secondary: #EFF2FC;
    --color-lightBG: #F3F6FF;
    --color-white: #ffffff;
    --color-btn-circle: #ffffff;
    --color-paragraph-secondary: #585C7B;
    --color-accordion-secondary: #fff;
    --color-contact-bg: #fff;
    --color-review-card: #fff;

    /* Brand Colors */
    --color-primary: #6366F1;
    --color-gradient: linear-gradient(0deg, rgba(99,102,241,0.1) 0%, rgba(218,70,239,0.05) 42%, rgba(241,244,253,0.07) 83%);
    --color-gradient-dark: linear-gradient(0deg, rgba(255,255,255,0.1) 0%, rgba(200,200,200,0.05) 42%, rgba(150,150,150,0.07) 83%);

    /* System Colors */
    --color-error: #EF4444;
    --color-success: #22C55E;
    --color-warning: #FFBA08;
    --color-info: #4C82F7;

    /* Shadows */
    --shadow-S: 0px 4.4px 12px -1px rgba(19, 16, 34, 0.06), 0px 2px 6.4px -1px rgba(19, 16, 34, 0.03);
    --shadow-M: 0px 4.4px 20px rgba(19, 16, 34, 0.05), 0px 4px 9px rgba(19, 16, 34, 0.03);
    --shadow-L: 0px 4.8px 24.4px -6px rgba(19, 16, 34, 0.1), 0px 4px 13px -2px rgba(19, 16, 34, 0.06);
    --shadow-XL: 0 8px 16px rgba(0, 0, 0, 0.6), 0 4px 8px rgba(0, 0, 0, 0.4);
    --shadow-brand-btn: 0px 8px 18px -8px rgba(99, 102, 241, 0.9);
    --shadow-seconday: 0px 8px 18px -8px rgba(19, 16, 34, 0.15);

    /* Miscellaneous*/
    --container-padding: 1rem;
    --transition-time: all 0.2s;

    

    

}


* {
    margin: 0;
    padding: 0; 
    box-sizing: border-box;
    -webkit-tap-highlight-color: rgba(0,0,0,0);

}

header {
   padding-top: 4px;  
}

.contact-header {
    background-color: var(--color-lightBG);
  }

body {
    font-family: "Manrope", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;
    font-size: 16px;
    
    
}
body.dark {
    background-color: #0b0f19;
    --color-heading:#ffffff;
    --color-body:#ffffff;
    --color-btn-circle: #ffffff05;
    --color-paragraph-secondary: #ffffffb3;
    --color-lightBG: #1c2029; 
    --color-divider: rgba(255, 255, 255, 0.15);
    --color-white: #131022;
    --color-accordion-secondary: #151822;
    --color-contact-bg:rgba(99, 102, 241, 0.08);
    --color-placehold: #b4b7c97e;
    --color-review-card: #ffffff04;

    --shadow-S: 0px 4.4px 12px -1px rgba(254, 254, 254, 0.06), 0px 2px 6.4px -1px rgba(255, 255, 255, 0.03);
    --shadow-M: 0px 4.4px 20px rgba(255, 255, 255, 0.05), 0px 4px 9px rgba(255, 255, 255, 0.03);
    --shadow-L: 0px 4.8px 24.4px -6px rgba(255, 255, 255, 0.1), 0px 4px 13px -2px rgba(255, 255, 255, 0.06);
    --shadow-XL: 0 8px 16px rgba(255, 255, 255, 0.6), 0 4px 8px rgba(255, 255, 255, 0.4);

    header {
        background-color: #1b1f29;
    }

    #discover-more {
        opacity: 70%;
    }

}

#features {
    margin-right: 2rem;   
}
#home {
    margin-right: 2rem;   
}

.wrapper {
    display: grid;
    grid-template-rows: auto 1fr auto;
    height: 100vh;
}

.container {
    max-width: 540px;
    width: 100%;
    padding-left: var(--container-padding);
    padding-right: var(--container-padding);
    margin-left: auto;
    margin-right: auto;

}

a {
    color: var(--color-body);
    text-decoration: none;
    cursor: pointer;
    
}
a:hover {
    color: var(--color-primary);
    text-decoration: underline;
}

h1, h2, h3, h4, h5 {
    color: var(--color-heading);
}

p {
    color: var(--color-body);
}

.btn-primary {
    background-color:var(--color-primary) ;
    color: var(--color-white);
    border-radius: 4px;
    padding: 8px 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    font-size: 14px;
}

.btn-primary:hover {
    background-color: var(--color-muted);
    color: var(--color-white);
    text-decoration: none;
}

.btn-download-app {
    background-color:var(--color-heading) ;
    border-radius: 8px;
    padding: 8px 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    font-size: 14px;
}

.btn-download-app:hover {
    background-color: var(--color-muted);
    text-decoration: none;
}

.btn-primary i {
    margin-right: .5rem;
}

.btn-circle { /* Got the inspiration/start from ChatGPT but rewrote the code and changed a bunch of values myself. */  
    display: flex;
    justify-content: center;
    align-items: center;
    width: 44px; 
    height: 44px; 
    border-radius: 50%;
    background-color: var(--color-btn-circle); 
    color: var(--color-heading-dark);
    line-height: 44px; 
    font-size: 12px;
    cursor: pointer;
    box-shadow: var(--shadow-S);
    transition: box-shadow 0.2s ease;
}
.btn-circle:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25), 
                0 8px 24px rgba(0, 0, 0, 0.25);
}

.btn-menu {
    border: none;
    background-color: transparent;
    font-size: 1.5rem;
}

.btn-toggle-switch {
    display: flex;
    align-items: center;
    gap: 10px;

}

.btn-toggle-switch .label {
    display: none;
}

.toggle-switch {
    position: relative;
    display: inline-block;
    width: 45px;
    height: 25px;
}

.toggle-switch input {
    opacity: 0;
}

.toggle-switch input:checked + .slider {
    background-color: var(--color-primary);
}

.toggle-switch input:focus + .slider {
    box-shadow: 0 0 5px var(--color-primary) ;
}

.toggle-switch input:checked + .slider:before {
    transform: translateX(20px);
    background-color: white;
}

.toggle-switch .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--color-muted);
}
.toggle-switch .slider:before {
    position: absolute;
    content: "";
    height: 19px;
    width: 19px;
    left: 3px;
    bottom: 3px;
    background-color: var(--color-white);
    transition: all 0.2s;
}

.toggle-switch .slider.round {
    border-radius: 35px;
}

.toggle-switch .slider.round:before {
    border-radius: 50%;
}

.slider.round {
    box-shadow: var(--shadow-brand-btn);
}

.navbar {
    display: none;
}

.nav-link {
    color: var(--color-heading);
    font-weight: 600;
    text-decoration: none;
}
.nav-link:hover {
    color: var(--color-primary);
    text-decoration: underline;
}


#signin {
    display: none;
   
}

header .container {
    display: grid;
    grid-template-columns: 1fr auto auto;
    gap: 2rem;
    align-items: center;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

footer {
    font-size: 14px;
    padding-top: 1rem;
    padding-bottom: 1rem;
    color: var(--color-muted);

        .footer-text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: .5rem;
        align-items: center;

        p {
        color: var(--color-muted);
        }
    }

    @media (min-width: 768px) {
        .footer-text {
            flex-direction: row;
        }
    }

}

#brands {
    display: none;
    padding-top: 2rem;
    padding-bottom: 2rem;

    .container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1.5rem;
    }
}

.brand-box {
    border: 1px solid var(--color-divider);
    border-radius: 8px;
    height: 100px;
    width: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.icon-box {
    background-color: rgba(99, 102, 241, 0.08);
    padding: 16px;
    border-radius: 8px;
    height: 60px;
    width: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
    
}

@media (min-width: 768px) {

    footer .container {
        flex-direction: row;
    }

    .container {
        max-width: 720px;   
    }

    .btn-toggle-switch .label {
        display: block;
        color: #565973;
    }

    .slider.round {
        box-shadow:none;
    }

    header .container {
        gap: 3rem;
    }

    #brands {
        display: block;
    }

    #brand-5, #brand-6 {
        display: none;
    }

}

@media (min-width: 1400px) {
    .container {
        max-width: 1320px;
    }

    header .container {
        grid-template-columns: auto 1fr auto auto;
        gap: 3rem;  
    }

    .navbar {
        display: block;
    }

    .btn-menu {
        display: none;
    }

    #signin {
        display: block;
    }

    #brand-5, #brand-6 {
        display: flex;
    }

}

#hero {
    
    background: var(--color-gradient);
    padding-bottom: 2rem;
    overflow: hidden;

    @media (min-width: 768px) {
        padding: 0;
        
    }

    .container {
        position: relative;
        display: grid;
        gap: 3rem;
        grid-template-columns: 1fr;
        grid-template-areas: "headline" "content";

        @media (min-width: 768px) {
            grid-template-columns: 1fr 1fr;
            grid-template-areas: "headline headline" 
                                  "content images";
        }

        @media (min-width: 1400px) {
            grid-template-columns: 1fr 1fr ;
            grid-template-areas: "headline images" 
                                  "content images";
        }
    }

    .headline {
        grid-area: headline;
        text-align: center;

        h1 {
            color: var(--color-heading);
            font-size: 34.1px;
            font-weight: 800;
            margin-top: 2rem;    
        }

        @media (min-width: 768px) {
            h1 {
                font-size: 44.3px;
            }
        }
        @media (min-width: 1400px) {
            h1 {
                font-size: 56px;
                text-align: left;
            }
        }
    }

    .content {
        grid-area: content;
        text-align: center;

        @media (min-width: 768px) {
            text-align: left;
        }

        p {
            color: var(--color-body);
            font-size: 18px;
            margin-bottom: 3rem;

        }
        .buttons {
            display: flex;
            flex-direction: column;
            gap: 1rem;

            @media (min-width: 1400px) {
                flex-direction: row;
            }



        }
        .discover-more {
            display: flex;
            gap: 1rem;
            align-items: center;
            font-size: 14px;
            text-decoration: none;
            justify-content: center;
            margin-top: 2rem;
            margin-bottom: 2rem;

            @media (min-width: 768px) {
                justify-content: flex-start;
            }

            @media (min-width: 1400px) {
                justify-content: flex-start;
                margin-top: 10rem;
            }

        }      
    }

    .images {
        position: relative;
        grid-area: images;
        display: none;

        @media (min-width: 768px) {
            display: block;
        }

        .img-back {
            position: absolute;
            z-index: -10;
            bottom: 0;
            right: 130px;
            width: 60%;
            height: 82%;

            @media (min-width: 1400px) {
                width: 49%;
                bottom: -42px;
                right: 175px;
            }
            
        }
        .img-front {
            position: absolute;
            z-index:-5;
            bottom: 0;
            right: 0;
            width: 65%;

            @media (min-width: 1400px) {
                width: 50%;
                
            }

        }   
    }
}

#app-features {
margin-top: 2.5rem;
margin-bottom: 2.5rem;

    #features-paragraph {
        text-align: center;
    }

    h1 {
        grid-area: headline;
        font-size: 27.9px;
        color: var(--color-heading);
        margin-bottom: 2rem;
        margin-top: 0;
        text-align: center;
    }

    h5 {
        font-size: 20px;
        color: var(--color-heading);
        margin-bottom: 1rem;
        text-align: left;
    }

    p {
        color:var(--color-paragraph-secondary);
        grid-area: paragraph;
        font-size: 16px;
        text-align: left;
    }

    #image {
        display: none;
        grid-area: image;
    }

    .features-grid {
        margin-top: 2rem;
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
    }
    
    .feature-item {
        width: 360px;
        height: 80px;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .feature-text {
        display: flex;
        flex-direction: column;
    }

    @media(min-width: 768px) {
     
        h1 {
            font-size: 33.5px;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        h5 {
            font-size: 20;
        }

        p {
          font-size: 16px; 
          margin-bottom: 2.5rem; 
        }

        #features-paragraph {
            font-size: 18px;
            line-height: 28.8px;
            width: 705px;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 2rem;
        }
        
        .feature-item {
            width: 330px;
            height: 120px;
            display: flex;
            align-items: flex-start;
            gap: 1.5rem;

            h5 {
                font-size: 20px;
                margin-bottom: 0.8rem;
            }
        
            p {
                font-size: 16px;
                margin: 0;
            }
        }
    }
        
        
    @media (min-width: 1400px) {
        #image {
            display: block;
        }

        .container {
            display: grid;
            grid-template-columns: 1fr 1.5fr;
            grid-template-areas:
            "image headline"
            "image paragraph";
        }
   
        h1 {
            font-size: 40;
            text-align: left;
        }

        p {
          font-size: 18px;  
        }

        .feature-item {
            width: 345px;
            height: 120px;
            display: flex;
            align-items: flex-start;
            gap: 1.5rem;

            h5 {
                font-size: 20px;
                margin-bottom: 0.8rem;
            }
        
            p {
                font-size: 16px;
                margin: 0;
            }
        }

        #features-paragraph {
            width: 750px;
        }
    }
}

#iphone-left-desk {
    display: none;
}

#iphone-mid-desk {
    display: none;
}

#iphone-right-desk {
    display: none;
}
#iphone-left-tab {
    display: none;
}
#iphone-right-tab {
    display: none;
}
#desktop-text {
    display: none;
}
#tablet-text {
    display: none;
}

#how-does-it-work {
    background-color: var(--color-lightBG);
    padding-top: 4rem;
    padding-bottom: 5.5rem;

    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    h1 {
        color: var(--color-heading);
        font-size: 27.9px;
        margin-bottom: 2rem;
        text-align: center;
    }

    h4 {
        max-width: 271px;
        color: var(--color-heading);
        font-size: 21.6px;
        text-align: center;
        margin: 2rem auto 1.5rem;
    }

    p {
        
        color: var(--color-paragraph-secondary);
        text-align: center;
    }

    @media (min-width: 768px) {
        #tablet-text {
            display: block;
        }

        #mobile-text {
            display: none;
        }
        
        #iphone-left-tab {
            display: block;
        }
        
        #iphone-right-tab {
            display: block;
        }

        #phone-6 {
            display: flex;
            flex-direction: row;
        }

        #iphone-mid-tab {
            width: 203.32px;
            height: 410.99px;
        }

        h1 {
            font-size: 33.5px;
        }

        h4 {
            font-size: 22.7px;
            max-width: 462px;
            margin: 2rem auto 1rem;
        }

        p {
            font-size: 16px;
            max-width: 424px;
            margin: 0 auto;
        }
    }

    @media (min-width: 1400px) {
        padding-top: 5rem;

        #iphone-left-tab {
            display: none;
        }

        #iphone-mid-tab {
            display: none;
        }

        #iphone-right-tab {
            display: none;
        }

        #iphone-left-desk {
            display: block;
        }

        #iphone-mid-desk {
            display: block;
        }

        #iphone-right-desk {
            display: block;
        }

        #phone-6 {
            margin-top: 1rem;
            display: flex;
            flex-direction: row;
            gap: 5rem;
        }

        #tablet-text {
            display: none;
        }

        #desktop-text {
            display: block;
        }
        
        h1 {
            font-size: 40px;
        }

        h4 {
            font-size: 24px;
            max-width: 308px;
        }

        p {
            font-size: 16px;
            max-width: 636px;
            color: var(--color-body);
        }
    }

}

#only-desktop { 
    display: none;

    @media (min-width: 1400px) {
        display: block;
    }


    h2 {
        font-size: 32px;
        margin-top: 1rem;
        margin-bottom: 2rem;
    }

    .checklist {
        
        li {
            list-style: none;
            color: var(--color-body);
            
        }
        
        i {
            margin-bottom: 1rem;
            margin-right: 2rem;
            
        }
    }

    #learn-more {
        width: 159px;
        height: 44px;
        gap: .8rem;
        margin-top: 2rem;

        span {
            margin-bottom: .2rem;
        }

    }

    #all-grid {
        padding-top: 4rem;
        padding-bottom: 6rem ;
        margin-left: 6rem;
        margin-right: 2rem;
        display: grid;
        grid-template-areas: 
        "top-left spending"
        "contacts bottom-right";
        row-gap: 2rem;
        

    }

    #top-left {
        grid-area: top-left;
        width: 416px;
        height: 302px;
        margin-left: .1rem;
        margin-top: auto;
        margin-bottom: auto;
    
    }

    #bottom-right {
        grid-area: bottom-right;
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 0rem;
        h2 {
            width: 526px;
            height: 84px;
        }

    }

    #spending-img {
        grid-area: spending;
        margin-left: 0rem;
        margin-top: 3rem;
    }

    #contact-img {
        grid-area: contacts;
    }
    
    .btn-primary {
        border-radius: 6px;
    }

    .icon-box {
        display: flex;
        flex-direction: row;
    }

    #cards {
        display: flex;
        gap: 2rem;
    }

    .icon-card {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        width: 243px;
        height: 154px;

        p {
            color: var(--color-body);
        }
    }
} 

#testimonials {
display: none;

    @media (min-width: 1400px) {
        display: block;
        background-color: var(--color-lightBG);
        
        .container {
            display: flex;
            justify-content: center;
        }

        h1 {
            color: var(--color-heading);
            font-size: 40px;
            width: 306px;
            height: 104px;
        }

        #clients {
            display: flex;
            padding-top: 3rem;
            padding-bottom: 3rem;
            gap: 5rem;
        }

        #testimonialsHeading {
        margin-right: 0rem;
        }

        .review-card {
        background-color: var(--color-review-card);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 416px;
        height: 350px;
        margin: 1rem;
        position: relative;
        }

        .quotes-icon {
        position: absolute;
        top: -30px;
        left: 10px;
        }
        
        .stars {
        color: #ffcc00;
        font-size: 20px;
        margin-bottom: 1.5rem;
        margin-top: 2rem;
        }
        
        .comment {
        font-size: 18px;
        color: var(--color-body);
        line-height: 1.5;
        }
        
        .user-info {
        display: flex;
        align-items: center;
        margin-top: 2rem;
        }
        
        .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 10px;
        }
        
        .user-details {
        display: flex;
        flex-direction: column;
        }
        
        .author {
        font-size: 16px;
        font-weight: bold;
        color: var(--color-heading);
        }
        
        .job-role {
        font-size: 14px;
        color: var(--color-muted);
        }
        
        .testimonials {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0px;
        }

    }

}

#FAQ {

    .accordion {
        width: 366px;
        margin-bottom: 1rem;
    }

    text-decoration: none;

    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

    }

    a img:hover {
        box-shadow: var(--shadow-XL);
        border-radius: 8px;
    }

    .contact-boxes-desktop {
        display: none;
    }
    .contact-boxes-tablet {
        display: none;
    }
    

    .text {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding-top: 3rem;
        padding-bottom: 2rem;
        text-align: center;
    }

    .btn-primary {
        width: 162px;
        height: 49.5px;
        margin-top: 2rem;
        margin-bottom: 2rem;
        border-radius: 6px;
    }

    .btn-circle {
        margin-left: 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: var(--color-lightBG);
        transition: background-color 0.3s ease;
        flex-shrink: 0;
    }

    .accordion-container {
        width: 366px;
    }
    
    .accordion-content {
        border-top: 1px solid var(--color-divider);
        font-size: 14px;
        
        p {
            font-size: 14px;
            color: var(--color-paragraph-secondary);
        }
    }

    #accordion-top {
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        
    }
    
    #accordion-bottom {
        border-bottom-left-radius: 6px;
        border-bottom-right-radius: 6px;
    }

    .accordion-item {
        background-color: var(--color-white);
        width: 100%;
        border: 1px solid var(--color-divider);
        overflow: hidden;
    }
    
    .accordion-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-family: inherit;
        width: 100%;
        padding: 15px;
        background-color: var(--color-white);
        border: none;
        border-radius: 0px;
        cursor: pointer;
        text-align: left;
        font-size: 16px;
        font-weight: 600;
        color: var(--color-heading);
        transition: background-color 0.3s ease;
        padding-right: 1.5rem;
    }
    
    .accordion-header:hover {
        background-color: rgba(99, 101, 241, 0.221);
    }
    
    .accordion-content {
        padding: 20px;
        background-color: var(--color-white);
        display: none;
        animation: slideDown 0.3s ease;
        text-decoration: none;
    }
    
    .accordion-item.active .accordion-content {
        display: block;
    }

    .accordion-header .btn-circle i {
        transition: transform 0.3s ease, color 0.3s ease;
        transform: rotate(0deg);
        color: var(--color-heading);
    }
    
    .accordion-item.active .accordion-header .btn-circle i {
        transform: rotate(180deg);
        transition: transform 0.3s;
        color: #fff;
    }

    .accordion-item.active .btn-circle {
        background-color: var(--color-primary);
        box-shadow: 0px -8px 18px -8px rgba(99, 102, 241, 0.9);
    }
   
    @keyframes slideDown {
        from {
            opacity: 0;
            max-height: 0;
        }
        to {
            opacity: 1;
            max-height: 100%;
        }
    }

    @media (min-width: 768px) {
        #contact-us {
            display: none;
        }

        .accordion {
           width: 714px;
        }

        .accordion-container {
            width: 714px;
        }

        .contact-boxes-tablet {
            display: flex;
            margin-top: 2rem;
            margin-bottom: 2rem;
            gap: 2rem;
        }

        .accordion-item {
            margin-bottom: 1rem;
            border-radius: 8px;
            
        }

        .accordion-content {
            margin-top: 0rem;
            border-top: none;
            background-color: var(--color-accordion-secondary);
        }
        
        .accordion-header {
            background-color: var(--color-accordion-secondary);
            padding: 20px;
        }
    }

    @media (min-width: 1400px) {
        .contact-boxes-tablet {
            display: none;
        }

        h2 {
            font-size: 32px;
            width: 317px;
            text-align: left;
        }
        p {
            font-size: 18px;
            margin-top: 2rem;
            width: 404px;
            text-align: left;
        }

        .contact-boxes-desktop {
            display: flex;
            gap: 2rem;
        }

        .container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            align-items: self-start;
            gap: 5rem;
            column-gap: 12rem;
            margin-top: 2rem;
            margin-bottom: 0rem;
          }
          
          .faq-contact {
            align-self: flex-start;
            margin: 0;
            padding: 0;
            width: 100%;
            max-width: 300px;
            flex-direction: column;
            gap: 20px;
          }
          
          .accordion {
              display: grid;
              flex-direction: column;
              margin-top: 8rem;
            }

            .accordion-header {
                -bottom: 0rem;
            }

            .accordion-content {
                margin-top: 0rem;
                p {
                    width: 600px;
                    margin-top: 0;
                }

                padding: 0px 20px 20px 20px;
            }

            .accordion-container {
                margin-top: 3rem;
            }
            
        }
        
    }
    
.sub-text-desktop {
    display: none;
}  

.background-card {
    display: grid;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2rem;
    margin-top: 1rem;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    gap: 20px;
    padding: 20px;
    width: 366px;
    height: 251px;
    background-color: var(--color-lightBG);
    border-radius: 8px;
}

.subscribe-container {
    display: flex;
    grid-column: 1 / span 2;
    align-items: center;
    background-color: #fff;
    border-radius: 6px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 0;
    height: 52px;
    border: 1px solid #D4D7E5;
    position: relative;
}



.icon-wrapper {
    display: flex;
    align-items: center;
    padding-left: 15px;
    padding-right: 5px;

}

.fa-envelope {
    font-size: 15px;
    color: var(--color-muted);
}

.subscribe-input {
    flex: 1;
    border: none;
    outline: none;
    padding: 10px;
    font-size: 16px;
    min-width: 175px;
    
}

.subscribe-input::placeholder {
    color: var(--color-placehold);
}

.subscribe-button {
    flex-grow: 1;
    background-color: var(--color-primary);
    color: var(--color-white);
    border: none;
    padding: 20px 0;
    font-size: 16px;
    border-radius: 0 6px 6px 0;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;    
    border: none;
    height: 52px;
    margin-right:-1px;
}

.subscribe-button:hover {
    background-color: var(--color-muted);
}

#bell {
    margin-top: 1rem;
    grid-row: 1;
    grid-column: 1;
    text-align: left;
}
.sub-text {
    grid-column: 1 / span 2;
    grid-row: 1;
    margin-left: 6rem;
    margin-top: 2rem;
    text-align: left;

    h2 {
    font-size: 21.6px;
    font-weight: 800;
    }
    
}
    
@media (min-width: 768px) {
    .background-card {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 720px;
        height: 223px;
        gap: 0rem;
        margin: 0;
    }

    .container {
        padding: 0;
    }
    

    .sub-text {
        margin-left: 3rem;
        padding: 0;
        margin-bottom: 2rem;

        h2 {
            font-size: 22.7px;
        }

    }

    .subscribe-container {
        width: 320px;
        height: 52px;       
    }
}
    
@media (min-width: 1400px) {


    .sub-text {
        display: none;
    }
    
    #bell {
        margin: 0;
        padding: 0;
    }

    .background-card {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 1280px;
        height: 223px;
        gap: 4rem;
        margin-left: 0rem;
    }

    .sub-text-desktop {
        display: block;
        width: 416px;
        height: 68px;

        h4 {
            font-size: 24px;
            font-weight: 900; 
            }
    }

    .subscribe-container {
        width: 472px;
        height: 52px;
    }

    .subscribe-input {
        min-width: 300px;
    }

}
        
.error-message {
    position: absolute;
    top: 96%; 
    left: 0;
    width: 100.2%; 
    overflow: hidden;
    color: #EF4444;
    background-color: rgba(239, 68, 68, 0.1);
    border: 1px solid #EF4444;
    border-radius: 4px;
    padding: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
    font-weight: bold;
    margin-top: 0.25rem;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
}

.success-message {
    position: absolute;
    top: 96%; 
    left: 0;
    width: 100.2%; 
    overflow: hidden;
    color: rgb(7, 226, 7);
    background-color: rgba(0, 255, 34, 0.151);
    border: 1px solid rgb(7, 226, 7);
    border-radius: 4px;
    padding: 0.5rem;
    font-size: 0.9rem;
    text-align: center;
    font-weight: bold;
    margin-top: 0.25rem;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
}

.contact-us-page {
  background-color: var(--color-lightBG);
}

.contact-info {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

@media (min-width: 768px) {
  .contact-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 2rem;
    max-width: 1320px;
  }
}

@media (min-width: 1400px) {
  .contact-info {
    column-gap: 5rem;
  }
}

.left-column {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.contactheading {
  margin-top: 2rem;
  font-size: 25px;
  color: var(--color-heading);
}

.contactheading h1 {
  font-size: 32px;
  font-weight: 800;
  margin-bottom: 3rem;
}

@media (min-width: 768px) {
  .contactheading h1 {
    font-size: 36px;
  }
}

@media (min-width: 1400px) {
  .contactheading h1 {
    font-size: 40px;
  }
}

.contact-card {
  width: 400px;
  display: flex;
  flex-direction: row;
  gap: 1.5rem;

  p {
    margin: 1rem 0;
  }

  h3 {
    font-size: 24px;
  }

  a {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 600;
  }

  a:hover {
    color: var(--color-primary);
    text-decoration: underline;
  }
}

@media (max-width: 767px) {
  .contact-card {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .contact-card .icon-container {
    margin-bottom: 1rem;
  }
}

.icon-container {
  display: flex;
  align-items: flex-start;
}

.contact-icon {
  font-size: 3rem;
  color: var(--color-primary);
  background-color: var(--color-contact-bg);
  padding: 0.5rem;
  border-radius: 50%;
}

.consultation-form-container {
  background-color: var(--color-contact-bg);
  padding: 3rem;
  gap: 2rem;
  border-radius: 8px;
  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.1);
  margin-bottom: -5rem; 
  margin-top: 3.5rem;
  z-index: 1;
  position: relative;
  width: 100%; 
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

input {
  color: var(--color-heading);
}

.consultation-form-container h2 {
  font-weight: 800;
  font-size: 32px;
  margin-bottom: 3rem;
}

.consultation-form {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.consultation-form label {
  font-size: 14px;
  color: var(--color-heading);
  font-weight: 500;
}

.consultation-form input,
.consultation-form select {
  width: 100%;
  padding: 0.75rem;
  font-size: 16px;
  background-color: var(--color-white);
  border: 1px solid var(--color-forms);
  border-radius: 6px;
  outline: none;
  transition: border-color 0.3s;
}

.consultation-form input::placeholder {
  color: var(--color-placehold);
}

#specialist {
  margin-bottom: 5rem;
}

.custom-select {
  color: var(--color-heading);
}

.consultation-form button {
  padding: 1rem;
  font-size: 16px;
  font-weight: 600;
  color: var(--color-white);
  background-color: var(--color-primary);
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s;
  box-shadow: 0px 4px 16px rgba(99, 102, 241, 0.3);
  margin-bottom: 1rem;
}

.consultation-form button:hover {
  background-color: var(--color-muted);
}

.success {
  color: green;
  font-size: 1rem;
  margin-top: 1rem;
}

.error {
  color: red;
}

select {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: url('./assets/images/arrow.svg') no-repeat;
  background-position: calc(100% - 0.75rem);
}

.breadcrumb {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 14px;
  margin-bottom: 2rem;
}

.breadcrumb a {
  text-decoration: none;
  color: var(--color-muted); 
}

.breadcrumb-active {
  color: var(--color-primary); 
}

.breadcrumb svg {
  margin: 0 0.5rem;
}

@media (max-width: 767px) {
  .breadcrumb {
    font-size: 12px;
  }
}

.map-page {
  background-color: var(--color-white);
  padding-top: 10rem;
}

.map-page .container {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  margin-bottom: 5rem;
}

@media (min-width: 768px) {
  .map-page .container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: "map centers";
    gap: 2rem;
  }
}

.map-section {
  grid-area: map;
}

.leaflet-container {
  border-radius: 8px;
}

.medical-centers {
  grid-area: centers;
  display: flex;
  flex-direction: column;
  gap: 3rem;
}

.center {
  margin-left: 0;

  h3 {
    font-size: 24px;
    font-weight: 800;
    margin-bottom: 1.5rem;
  }

  p,
  .opening-hours {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 1rem;
    color: var(--color-body);

    svg {
      color: var(--color-primary);
    }
  }
}

@media (min-width: 768px) {
  .center {
    margin-left: 2rem;
  }
}

@media (min-width: 1400px) {
  .center {
    margin-left: 4rem;
  }
}

.social-media {
  display: flex;
  gap: 1rem;
  margin-top: 0rem;
}

.social-media a {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 40px;
  height: 40px;
  background-color: var(--color-secondary);
  color: #333;
  border-radius: 8px;
  font-size: 20px;
  transition: color 0.3s, background-color 0.3s;
  text-decoration: none;
  margin-top: 3.5rem;
}

.social-media a:hover {
  color: var(--color-primary);
  background-color: var(--color-secondary);
}

.menu-button {
  position: relative;
  transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.btn-menu {
  background: none;
  border: none;
  cursor: pointer;
}

.menu-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: var(--background-color, #fff);
  border: 1px solid var(--border-color, #ccc);
  list-style: none;
  padding: 0;
  margin: 0;
  z-index: 1000;
  opacity: 0;
  transform: translateY(-10px);
  pointer-events: none;
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.menu-dropdown.open {
  opacity: 1;
  transform: translateY(0);
  pointer-events: auto;
}

.menu-dropdown li {
  margin: 0;
}

.menu-dropdown li a {
  display: block;
  padding: 10px 20px;
  text-decoration: none;
  color: var(--text-color, #333);
}

.menu-dropdown li a:hover {
  background-color: var(--hover-background-color, #f0f0f0);
}



  
 

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
